buildscript {
    ext.kotlin_version = '2.2.0'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}

plugins {
    id "java-library"
    id "org.jetbrains.kotlin.jvm" version "2.2.0"
    id "org.jetbrains.kotlin.plugin.serialization" version "2.2.0"
    id "maven-publish"
    id "signing"
    id "io.github.gradle-nexus.publish-plugin" version '2.0.0'
    id 'build.buf' version "0.10.3"
}

tasks.named("bufFormatApply").configure {
    dependsOn("bufGenerate")
    dependsOn("bufFormatCheck")
    dependsOn("bufLint")
}

group = "org.vdaas.vald"
archivesBaseName = "vald-client-java"
version = "1.7.17"
description = "a client library for Vald (https://github.com/vdaas/vald)."

def isDevBuild = hasProperty("dev")
def isSnapshotBuild = hasProperty("snapshot")
def isReleaseBuild = hasProperty("release")
def protoDepsPath = "proto_deps"

if (isDevBuild || isSnapshotBuild) {
    version += "-SNAPSHOT"
}

repositories {
    if (isDevBuild) {
        mavenLocal()
    }
    mavenCentral()
}

dependencies {
    implementation 'io.grpc:grpc-stub:1.73.0'
    implementation 'io.grpc:grpc-protobuf:1.73.0'
    implementation 'com.google.protobuf:protobuf-java:3.25.1'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'build.buf:protovalidate:0.12.0'

    testImplementation 'org.jetbrains.kotlin:kotlin-stdlib:2.2.0'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.9.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.13.3'
    testImplementation 'io.grpc:grpc-okhttp:1.73.0'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams true
        events 'started', 'skipped', 'passed', 'failed'
        exceptionFormat 'full'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
        from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
        from javadoc.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'vald-client-java'
                packaging = 'jar'
                description = "a client library for Vald (https://github.com/vdaas/vald)."
                url = 'https://github.com/vdaas/vald-client-java'

                scm {
                    url = "scm:git@github.com:vdaas/vald-client-java.git"
                    connection = "scm:git@github.com:vdaas/vald-client-java.git"
                    developerConnection = "scm:git@github.com:vdaas/vald-client-java.git"
                }
                licenses {
                    license {
                        name = 'Apache 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0'
                    }
                }
                developers {
                    developer {
                        id = 'kpango'
                        name = 'Yusuke Kato'
                        email = 'kpango@vdaas.org'
                    }
                    developer {
                        id = 'kmrmt'
                        name = 'Kosuke Morimoto'
                        email = 'ksk@vdaas.org'
                    }
                    developer {
                        id = 'kevindiu'
                        name = 'Kevin Diu'
                        email = 'kevindiu@vdaas.org'
                    }
                }
            }
        }
    }
}

nexusPublishing {
    packageGroup = "org.vdaas.vald"
    repositories {
        sonatype {
            nexusUrl = uri("https://ossrh-staging-api.central.sonatype.com/service/local/")
            snapshotRepositoryUrl = uri("https://central.sonatype.com/repository/maven-snapshots/")
        }
    }
    transitionCheckOptions {
        maxRetries = 100
        delayBetween = Duration.ofSeconds(30)
    }
}

signing {
    required { isReleaseBuild }
    if(isReleaseBuild) {
        sign publishing.publications.mavenJava
    }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
